# DO NOT USE THIS DEPLOYMENT FOR PRODUCTION ENVIRONMENT : NOT SECURE
services:
  # DataLake services
  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: "minio"  # for testing purposes only
      MINIO_ROOT_PASSWORD: "test123minio"  # for testing purposes only
    ports:
      - "9000:9000"  # MinIO's default web interface
      - "9001:9001"  # MinIO's default console (optional, for monitoring) 
    command: server /data --console-address ":9001" 
    volumes:
      - minio_data:/data  # Persistent data storage
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API services
  api:
    build:
      context: ./api
    container_name: api
    depends_on:
      - init
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: test123minio
      S3_ENDPOINT: http://minio:9000
      MONGO_URI: mongodb://mongodb:27017/
    ports:
      - "8000:8000"

  # test API services
  gui:
    build:
      context: ./gui
    container_name: gui
    environment:
      API_URL: http://api:8000
    depends_on:
      - api
    ports:
      - "8080:8501"

  # init
  init:
    build:
      context: ./init
    container_name: init
    depends_on:
      - mongodb
      - minio

  # Airflow services
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow-webserver:
    build: .
    container_name: airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__WEBSERVER__SECRET_KEY=your_secret_key_here
    volumes:
      - logs:/opt/airflow/logs
      - ./build:/opt/airflow/build
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/scripts
    ports:
      - "8081:8080"
    command: airflow webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build: .
    deploy:
      resources:
        limits:
          memory: 8G
    container_name: airflow-scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    volumes:
      - logs:/opt/airflow/logs
      - ./build:/opt/airflow/build
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/scripts
    command: airflow scheduler

  airflow-init:
    build: .
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
    command: airflow version
    volumes:
      - logs:/opt/airflow/logs
      - ./build:/opt/airflow/build
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/scripts

volumes:
  mysql_data:
  postgres_data:
  minio_data:
  mongo_data:
  logs: